
// Ближайшие цели

1) реализовать мердж прошивки с бутлоадером.
 Бутлоадер всë таки пусть собирается отдельно,
 (и отдельным мэйкфайлом, 
  хотя есть минус в том что контроллер то один
  и его придëтся в двух местах указывать).
 ведь его не нужно часто собирать.
2) реализовать компиляцию ассемблера.
3) реализовать генерацию зависимостей .d

_____

Сделать настраивайым папку куда собирается конкретная прошивка,
   так же чтобы при clean они удалялись если это не текущая папка.
   Если проект представлен структурой папок,
   сделать чтобы в папках build это дерево папок повторялось
   для собираемых файлов.
Когда прошивка собирается в папку с кодом это не хорошо, захламляет исходники.

посмотреть makefile который у Ромы, какие там моменты изучить выписать то что позаимствовать{
    линковка ассемблера

    Пересмотреть makefile, подумать как можно улучшить структурирование, понятность,
    добавить переменные MAP = + EEP =  для конфигурирования наличия выходных файлов.
}

* сделать чтобы зависимости автоматически генерировались с помощю .d , описать в доке зачем это сделано
* попытаться сделать так чтобы достаточнр было указать TARGET_1 TARGET_2 TARGET_3 в переменную чтобы весь остальной код сгенерировался
* изучить параметры компилятора которые там используются и линкера
   ключи описать там же в мэйкфайле, а может в редми.
* изучить как линковать ассемблер, реализовать так же

глянуть avrdude параметры  https://github.com/DarkSector/AVR/blob/master/c/interrupts/makefile

В самом мэйкфайле описать некоторые вещи которые использую в avr-gcc,
что значит параметр и т.д. но не усердствовать, не захламлять.


__README.md
содержит описание функционала, и как использовать, 
и также описание синтаксиса мэйкфайлов и используемого инструментария gnu make и avr-gcc. 
а также ссылки на avr-gcc компилятор

и ответы на вопросы?

например как сделать то, как сделать сё

мэйкфайл для примера собирает 3 прошивки, он является базовым,
ещë возможно сделать скрипт на питоне, мастер создания мэйкфайла.

Так же в конце README.md описаны общие принципы Gnu make, и используемые в makefile инструментарий.

Так же ссылка на документацию к AVR-GCC и Gnu make,
и в конце описано используемые в makefile настройки компилятора.

также avrdude команда, и описание основных параметров дудки

один синтаксис clean для разных ОС
https://coderoad.ru/4058840/Makefile-%D0%BA%D0%BE%D1%82%D0%BE%D1%80%D1%8B%D0%B9-%D1%80%D0%B0%D0%B7%D0%BB%D0%B8%D1%87%D0%B0%D0%B5%D1%82-Windows-%D0%B8-Unix-%D0%BF%D0%BE%D0%B4%D0%BE%D0%B1%D0%BD%D1%8B%D0%B5-%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D1%8B




